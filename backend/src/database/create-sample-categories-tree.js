const { Category } = require('../models');

const createSampleCategoriesTree = async () => {
  try {
    console.log('X√≥a t·∫•t c·∫£ categories c≈©...');
    await Category.destroy({ where: {} });

    console.log('T·∫°o categories c·∫•p 1 (Gi·ªõi t√≠nh)...');

    // T·∫°o categories c·∫•p 1
    const nam = await Category.create({
      name: 'Nam',
      slug: 'nam',
      description: 'S·∫£n ph·∫©m d√†nh cho nam gi·ªõi',
      parent_id: null,
    });

    const nu = await Category.create({
      name: 'N·ªØ',
      slug: 'nu',
      description: 'S·∫£n ph·∫©m d√†nh cho n·ªØ gi·ªõi',
      parent_id: null,
    });

    const treEm = await Category.create({
      name: 'Tr·∫ª Em',
      slug: 'tre-em',
      description: 'S·∫£n ph·∫©m d√†nh cho tr·∫ª em',
      parent_id: null,
    });

    console.log('T·∫°o categories c·∫•p 2 (Lo·∫°i s·∫£n ph·∫©m)...');

    // Categories c·∫•p 2 cho Nam
    const aoNam = await Category.create({
      name: '√Åo Nam',
      slug: 'ao-nam',
      description: 'C√°c lo·∫°i √°o d√†nh cho nam',
      parent_id: nam.id,
    });

    const quanNam = await Category.create({
      name: 'Qu·∫ßn Nam',
      slug: 'quan-nam',
      description: 'C√°c lo·∫°i qu·∫ßn d√†nh cho nam',
      parent_id: nam.id,
    });

    // Categories c·∫•p 2 cho N·ªØ
    const aoNu = await Category.create({
      name: '√Åo N·ªØ',
      slug: 'ao-nu',
      description: 'C√°c lo·∫°i √°o d√†nh cho n·ªØ',
      parent_id: nu.id,
    });

    const quanNu = await Category.create({
      name: 'Qu·∫ßn N·ªØ',
      slug: 'quan-nu',
      description: 'C√°c lo·∫°i qu·∫ßn d√†nh cho n·ªØ',
      parent_id: nu.id,
    });

    const damNu = await Category.create({
      name: 'ƒê·∫ßm N·ªØ',
      slug: 'dam-nu',
      description: 'C√°c lo·∫°i ƒë·∫ßm d√†nh cho n·ªØ',
      parent_id: nu.id,
    });

    // Categories c·∫•p 2 cho Tr·∫ª Em
    const aoTreEm = await Category.create({
      name: '√Åo Tr·∫ª Em',
      slug: 'ao-tre-em',
      description: 'C√°c lo·∫°i √°o d√†nh cho tr·∫ª em',
      parent_id: treEm.id,
    });

    console.log('T·∫°o categories c·∫•p 3 (Chi ti·∫øt)...');

    // Categories c·∫•p 3 cho √Åo Nam
    await Category.create({
      name: '√Åo Thun Nam',
      slug: 'ao-thun-nam',
      description: '√Åo thun d√†nh cho nam',
      parent_id: aoNam.id,
    });

    await Category.create({
      name: '√Åo Polo Nam',
      slug: 'ao-polo-nam',
      description: '√Åo polo d√†nh cho nam',
      parent_id: aoNam.id,
    });

    await Category.create({
      name: '√Åo S∆° Mi Nam',
      slug: 'ao-so-mi-nam',
      description: '√Åo s∆° mi d√†nh cho nam',
      parent_id: aoNam.id,
    });

    // Categories c·∫•p 3 cho Qu·∫ßn Nam
    await Category.create({
      name: 'Qu·∫ßn Jean Nam',
      slug: 'quan-jean-nam',
      description: 'Qu·∫ßn jean d√†nh cho nam',
      parent_id: quanNam.id,
    });

    await Category.create({
      name: 'Qu·∫ßn √Çu Nam',
      slug: 'quan-au-nam',
      description: 'Qu·∫ßn √¢u d√†nh cho nam',
      parent_id: quanNam.id,
    });

    // Categories c·∫•p 3 cho √Åo N·ªØ
    await Category.create({
      name: '√Åo Thun N·ªØ',
      slug: 'ao-thun-nu',
      description: '√Åo thun d√†nh cho n·ªØ',
      parent_id: aoNu.id,
    });

    await Category.create({
      name: '√Åo Ki·ªÉu N·ªØ',
      slug: 'ao-kieu-nu',
      description: '√Åo ki·ªÉu d√†nh cho n·ªØ',
      parent_id: aoNu.id,
    });

    console.log('‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng c·∫•u tr√∫c c√¢y categories!');

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    const allCategories = await Category.findAll({
      attributes: ['id', 'name', 'slug', 'parent_id'],
      order: [['name', 'ASC']],
    });

    console.log('\nüìã Danh s√°ch categories ƒë√£ t·∫°o:');
    allCategories.forEach((c) => {
      const level = c.parent_id
        ? allCategories.find((p) => p.id === c.parent_id)?.parent_id
          ? 3
          : 2
        : 1;
      const indent = '  '.repeat(level - 1);
      console.log(
        `${indent}- ${c.name} (ID: ${c.id}) ${
          c.parent_id ? `[Parent: ${c.parent_id}]` : '[Root]'
        }`
      );
    });

    process.exit(0);
  } catch (err) {
    console.error('‚ùå L·ªói khi t·∫°o categories:', err.message);
    process.exit(1);
  }
};

createSampleCategoriesTree();
