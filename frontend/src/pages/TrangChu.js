import React, { useEffect, useState } from 'react';
import { Link, useSearchParams } from 'react-router-dom';
import { getProducts } from '../services/productService';
import ProductGrid from '../components/Product/ProductGrid';

const TrangChu = () => {
  const [allProducts, setAllProducts] = useState([]);
  const [latestProducts, setLatestProducts] = useState([]);
  const [saleProducts, setSaleProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchParams] = useSearchParams();

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setLoading(true);
        setError(null);

        // Get search params from URL
        const searchQuery = searchParams.get('search');
        const params = {};
        if (searchQuery) {
          params.search = searchQuery;
        }

        // ƒê√öNG: G·ªçi h√†m tr·ª±c ti·∫øp
        const res = await getProducts(params);

        let products = [];
        // C·∫ßn ki·ªÉm tra c·∫•u tr√∫c response.data t·ª´ backend c·ªßa b·∫°n.
        // V√≠ d·ª•: n·∫øu backend tr·∫£ v·ªÅ { success: true, data: { products: [...] } }
        if (res?.data?.data?.products) {
          products = res.data.data.products;
        }
        // Ho·∫∑c n·∫øu backend tr·∫£ v·ªÅ { success: true, data: [...] }
        else if (res && res.data && Array.isArray(res.data)) {
          products = res.data;
        }
        // Ho·∫∑c n·∫øu backend tr·∫£ v·ªÅ th·∫≥ng m·∫£ng s·∫£n ph·∫©m
        else if (res && Array.isArray(res)) {
          // Tr∆∞·ªùng h·ª£p getProducts() tr·∫£ v·ªÅ th·∫≥ng m·∫£ng
          products = res;
        } else {
          console.warn('C·∫•u tr√∫c d·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng nh∆∞ mong ƒë·ª£i:', res);
          products = [];
        }

        setAllProducts(products);

        // N·∫øu ƒëang t√¨m ki·∫øm, kh√¥ng chia section
        if (!searchQuery && products.length > 0) {
          // S·∫Øp x·∫øp theo ng√†y t·∫°o ƒë·ªÉ l·∫•y s·∫£n ph·∫©m m·ªõi nh·∫•t
          const sortedByDate = [...products].sort(
            (a, b) =>
              new Date(b.createdAt || b.created_at || 0) -
              new Date(a.createdAt || a.created_at || 0)
          );
          setLatestProducts(sortedByDate.slice(0, 8)); // L·∫•y 8 s·∫£n ph·∫©m m·ªõi nh·∫•t

          // L·ªçc s·∫£n ph·∫©m c√≥ gi·∫£m gi√°
          const onSaleProducts = products.filter((product) => {
            const salePrice = parseFloat(
              product.sale_price || product.salePrice || 0
            );
            return salePrice > 0;
          });
          setSaleProducts(onSaleProducts.slice(0, 8)); // L·∫•y 8 s·∫£n ph·∫©m gi·∫£m gi√°
        }
      } catch (err) {
        console.error('L·ªói khi t·∫£i s·∫£n ph·∫©m:', err);
        // L·∫•y th√¥ng b√°o l·ªói c·ª• th·ªÉ t·ª´ response.data.error n·∫øu c√≥, ho·∫∑c l·ªói chung
        setError(
          err.response?.data?.error ||
            err.message ||
            'L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫£i s·∫£n ph·∫©m'
        );
        setAllProducts([]);
        setLatestProducts([]);
        setSaleProducts([]);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [searchParams]);

  if (loading) {
    return (
      <div className='min-h-screen flex items-center justify-center bg-gray-50'>
        <div className='text-center'>
          <div className='loading-spinner mx-auto mb-4'></div>
          <p className='text-gray-600 text-lg'>üîÑ ƒêang t·∫£i s·∫£n ph·∫©m...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className='min-h-screen flex items-center justify-center bg-gray-50'>
        <div className='text-center max-w-md mx-auto'>
          <div className='text-red-500 text-6xl mb-4'>‚ùå</div>
          <h2 className='text-2xl font-bold text-gray-800 mb-2'>
            C√≥ l·ªói x·∫£y ra
          </h2>
          <p className='text-gray-600'>{error}</p>
          <button
            onClick={() => window.location.reload()}
            className='btn btn-primary mt-4'
          >
            Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  const searchQuery = searchParams.get('search');
  const displayProducts = searchQuery ? allProducts : [];

  if (!searchQuery && allProducts.length === 0) {
    return (
      <div className='min-h-screen flex items-center justify-center bg-gray-50'>
        <div className='text-center max-w-md mx-auto'>
          <div className='text-gray-400 text-6xl mb-4'>üì¶</div>
          <h2 className='text-2xl font-bold text-gray-800 mb-2'>
            Kh√¥ng c√≥ s·∫£n ph·∫©m
          </h2>
          <p className='text-gray-600'>Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c t√¨m th·∫•y.</p>
          <Link to='/' className='btn btn-primary mt-4'>
            Quay v·ªÅ trang ch·ªß
          </Link>
        </div>
      </div>
    );
  }

  if (searchQuery && displayProducts.length === 0) {
    return (
      <div className='min-h-screen flex items-center justify-center bg-gray-50'>
        <div className='text-center max-w-md mx-auto'>
          <div className='text-gray-400 text-6xl mb-4'>üîç</div>
          <h2 className='text-2xl font-bold text-gray-800 mb-2'>
            Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£
          </h2>
          <p className='text-gray-600'>
            Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o cho "{searchQuery}".
          </p>
          <Link to='/' className='btn btn-primary mt-4'>
            Quay v·ªÅ trang ch·ªß
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className='min-h-screen bg-gray-50'>
      {/* Hero Section */}
      <section className='bg-gradient-to-r from-primary-500 to-purple-600 text-white py-16'>
        <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center'>
          <h1 className='text-4xl md:text-5xl font-bold mb-4 animate-fade-in'>
            {searchQuery
              ? `K·∫øt qu·∫£ t√¨m ki·∫øm: "${searchQuery}"`
              : 'Th·ªùi Trang Hi·ªán ƒê·∫°i'}
          </h1>
          <p className='text-xl md:text-2xl opacity-90 animate-slide-up'>
            {searchQuery
              ? `T√¨m th·∫•y ${displayProducts.length} s·∫£n ph·∫©m`
              : 'Kh√°m ph√° b·ªô s∆∞u t·∫≠p th·ªùi trang m·ªõi nh·∫•t'}
          </p>
        </div>
      </section>

      {/* Search Results Section */}
      {searchQuery && (
        <section className='py-16'>
          <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'>
            <div className='text-center mb-12'>
              <h2 className='text-3xl font-bold text-gray-800 mb-4'>
                K·∫øt qu·∫£ t√¨m ki·∫øm
              </h2>
              <div className='w-24 h-1 bg-primary-500 mx-auto rounded-full'></div>
            </div>

            <ProductGrid
              products={displayProducts}
              loading={loading}
              error={error}
              emptyMessage={`Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o cho "${searchQuery}"`}
            />

            {displayProducts.length > 0 && (
              <div className='text-center mt-12'>
                <button className='btn btn-outline btn-lg'>
                  Xem th√™m s·∫£n ph·∫©m
                </button>
              </div>
            )}
          </div>
        </section>
      )}

      {/* Latest Products Section - Only show when not searching */}
      {!searchQuery && latestProducts.length > 0 && (
        <section className='py-16'>
          <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'>
            <div className='text-center mb-12'>
              <h2 className='text-3xl font-bold text-gray-800 mb-4'>
                S·∫£n ph·∫©m m·ªõi nh·∫•t
              </h2>
              <div className='w-24 h-1 bg-primary-500 mx-auto rounded-full'></div>
              <p className='text-gray-600 mt-4'>
                Kh√°m ph√° nh·ªØng s·∫£n ph·∫©m m·ªõi nh·∫•t trong b·ªô s∆∞u t·∫≠p c·ªßa ch√∫ng t√¥i
              </p>
            </div>

            <ProductGrid
              products={latestProducts}
              loading={false}
              error={null}
              emptyMessage='Ch∆∞a c√≥ s·∫£n ph·∫©m m·ªõi'
            />

            <div className='text-center mt-12'>
              <Link
                to='/nam'
                className='inline-block bg-primary-600 hover:bg-primary-700 text-white px-8 py-3 rounded-lg font-medium transition-colors'
              >
                Xem t·∫•t c·∫£ s·∫£n ph·∫©m
              </Link>
            </div>
          </div>
        </section>
      )}

      {/* Sale Products Section - Only show when not searching */}
      {!searchQuery && saleProducts.length > 0 && (
        <section className='py-16 bg-white'>
          <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'>
            <div className='text-center mb-12'>
              <h2 className='text-3xl font-bold text-gray-800 mb-4'>
                üî• Khuy·∫øn m·∫°i ƒë·∫∑c bi·ªát
              </h2>
              <div className='w-24 h-1 bg-red-500 mx-auto rounded-full'></div>
              <p className='text-gray-600 mt-4'>
                ƒê·ª´ng b·ªè l·ª° c∆° h·ªôi s·ªü h·ªØu nh·ªØng s·∫£n ph·∫©m v·ªõi gi√° ∆∞u ƒë√£i
              </p>
            </div>

            <ProductGrid
              products={saleProducts}
              loading={false}
              error={null}
              emptyMessage='Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m khuy·∫øn m·∫°i'
            />

            <div className='text-center mt-12'>
              <Link
                to='/khuyen-mai'
                className='inline-block bg-red-600 hover:bg-red-700 text-white px-8 py-3 rounded-lg font-medium transition-colors'
              >
                Xem t·∫•t c·∫£ khuy·∫øn m·∫°i
              </Link>
            </div>
          </div>
        </section>
      )}

      {/* Banner/CTA Section - Only show when not searching */}
      {!searchQuery && (
        <section className='py-16 bg-gradient-to-r from-purple-600 to-pink-600 text-white'>
          <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center'>
            <h2 className='text-3xl md:text-4xl font-bold mb-4'>
              Kh√°m ph√° phong c√°ch c·ªßa b·∫°n
            </h2>
            <p className='text-xl mb-8 opacity-90'>
              T√¨m ki·∫øm v√† mua s·∫Øm nh·ªØng s·∫£n ph·∫©m th·ªùi trang ph√π h·ª£p v·ªõi c√° t√≠nh
              c·ªßa b·∫°n
            </p>
            <div className='flex flex-col sm:flex-row gap-4 justify-center'>
              <Link
                to='/nam'
                className='bg-white text-purple-600 hover:bg-gray-100 px-8 py-3 rounded-lg font-medium transition-colors'
              >
                Th·ªùi trang Nam
              </Link>
              <Link
                to='/nu'
                className='bg-white text-purple-600 hover:bg-gray-100 px-8 py-3 rounded-lg font-medium transition-colors'
              >
                Th·ªùi trang N·ªØ
              </Link>
              <Link
                to='/tre-em'
                className='bg-white text-purple-600 hover:bg-gray-100 px-8 py-3 rounded-lg font-medium transition-colors'
              >
                Th·ªùi trang Tr·∫ª em
              </Link>
            </div>
          </div>
        </section>
      )}
    </div>
  );
};

export default TrangChu;
